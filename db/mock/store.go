// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kaus19/event-scheduler/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/kaus19/event-scheduler/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockStore) CreateEvent(arg0 context.Context, arg1 db.CreateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockStoreMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStore)(nil).CreateEvent), arg0, arg1)
}

// CreateTimeSlotEvent mocks base method.
func (m *MockStore) CreateTimeSlotEvent(arg0 context.Context, arg1 db.CreateTimeSlotEventParams) (db.TimeSlotsEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeSlotEvent", arg0, arg1)
	ret0, _ := ret[0].(db.TimeSlotsEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeSlotEvent indicates an expected call of CreateTimeSlotEvent.
func (mr *MockStoreMockRecorder) CreateTimeSlotEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeSlotEvent", reflect.TypeOf((*MockStore)(nil).CreateTimeSlotEvent), arg0, arg1)
}

// CreateTimeSlotUser mocks base method.
func (m *MockStore) CreateTimeSlotUser(arg0 context.Context, arg1 db.CreateTimeSlotUserParams) (db.TimeSlotsUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTimeSlotUser", arg0, arg1)
	ret0, _ := ret[0].(db.TimeSlotsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTimeSlotUser indicates an expected call of CreateTimeSlotUser.
func (mr *MockStoreMockRecorder) CreateTimeSlotUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTimeSlotUser", reflect.TypeOf((*MockStore)(nil).CreateTimeSlotUser), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockStore) DeleteEvent(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockStoreMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockStore)(nil).DeleteEvent), arg0, arg1)
}

// DeleteTimeSlotEvent mocks base method.
func (m *MockStore) DeleteTimeSlotEvent(arg0 context.Context, arg1 db.DeleteTimeSlotEventParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeSlotEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeSlotEvent indicates an expected call of DeleteTimeSlotEvent.
func (mr *MockStoreMockRecorder) DeleteTimeSlotEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeSlotEvent", reflect.TypeOf((*MockStore)(nil).DeleteTimeSlotEvent), arg0, arg1)
}

// DeleteTimeSlotUser mocks base method.
func (m *MockStore) DeleteTimeSlotUser(arg0 context.Context, arg1 db.DeleteTimeSlotUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimeSlotUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimeSlotUser indicates an expected call of DeleteTimeSlotUser.
func (mr *MockStoreMockRecorder) DeleteTimeSlotUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimeSlotUser", reflect.TypeOf((*MockStore)(nil).DeleteTimeSlotUser), arg0, arg1)
}

// GetEventByID mocks base method.
func (m *MockStore) GetEventByID(arg0 context.Context, arg1 int32) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockStoreMockRecorder) GetEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockStore)(nil).GetEventByID), arg0, arg1)
}

// GetTimeSlotsByEvent mocks base method.
func (m *MockStore) GetTimeSlotsByEvent(arg0 context.Context, arg1 int32) ([]db.TimeSlotsEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSlotsByEvent", arg0, arg1)
	ret0, _ := ret[0].([]db.TimeSlotsEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSlotsByEvent indicates an expected call of GetTimeSlotsByEvent.
func (mr *MockStoreMockRecorder) GetTimeSlotsByEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSlotsByEvent", reflect.TypeOf((*MockStore)(nil).GetTimeSlotsByEvent), arg0, arg1)
}

// GetTimeSlotsByUser mocks base method.
func (m *MockStore) GetTimeSlotsByUser(arg0 context.Context, arg1 int32) ([]db.TimeSlotsUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSlotsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.TimeSlotsUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSlotsByUser indicates an expected call of GetTimeSlotsByUser.
func (mr *MockStoreMockRecorder) GetTimeSlotsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSlotsByUser", reflect.TypeOf((*MockStore)(nil).GetTimeSlotsByUser), arg0, arg1)
}

// GetTimeSlotsForAllUsers mocks base method.
func (m *MockStore) GetTimeSlotsForAllUsers(arg0 context.Context) ([]db.GetTimeSlotsForAllUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeSlotsForAllUsers", arg0)
	ret0, _ := ret[0].([]db.GetTimeSlotsForAllUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeSlotsForAllUsers indicates an expected call of GetTimeSlotsForAllUsers.
func (mr *MockStoreMockRecorder) GetTimeSlotsForAllUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeSlotsForAllUsers", reflect.TypeOf((*MockStore)(nil).GetTimeSlotsForAllUsers), arg0)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// ListEvents mocks base method.
func (m *MockStore) ListEvents(arg0 context.Context) ([]db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0)
	ret0, _ := ret[0].([]db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockStoreMockRecorder) ListEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockStore)(nil).ListEvents), arg0)
}

// ListEventsByOrganizer mocks base method.
func (m *MockStore) ListEventsByOrganizer(arg0 context.Context, arg1 int32) ([]db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsByOrganizer", arg0, arg1)
	ret0, _ := ret[0].([]db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventsByOrganizer indicates an expected call of ListEventsByOrganizer.
func (mr *MockStoreMockRecorder) ListEventsByOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsByOrganizer", reflect.TypeOf((*MockStore)(nil).ListEventsByOrganizer), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0)
}

// UpdateEvent mocks base method.
func (m *MockStore) UpdateEvent(arg0 context.Context, arg1 db.UpdateEventParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockStoreMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStore)(nil).UpdateEvent), arg0, arg1)
}

// UpdateTimeSlotEvent mocks base method.
func (m *MockStore) UpdateTimeSlotEvent(arg0 context.Context, arg1 db.UpdateTimeSlotEventParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeSlotEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeSlotEvent indicates an expected call of UpdateTimeSlotEvent.
func (mr *MockStoreMockRecorder) UpdateTimeSlotEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeSlotEvent", reflect.TypeOf((*MockStore)(nil).UpdateTimeSlotEvent), arg0, arg1)
}

// UpdateTimeSlotUser mocks base method.
func (m *MockStore) UpdateTimeSlotUser(arg0 context.Context, arg1 db.UpdateTimeSlotUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimeSlotUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimeSlotUser indicates an expected call of UpdateTimeSlotUser.
func (mr *MockStoreMockRecorder) UpdateTimeSlotUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimeSlotUser", reflect.TypeOf((*MockStore)(nil).UpdateTimeSlotUser), arg0, arg1)
}
