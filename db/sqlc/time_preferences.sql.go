// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_preferences.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTimePreference = `-- name: CreateTimePreference :one
INSERT INTO time_preferences (owner_type, owner_id, start_time, end_time)
VALUES ($1, $2, $3, $4)
RETURNING id, owner_type, owner_id, start_time, end_time
`

type CreateTimePreferenceParams struct {
	OwnerType sql.NullString `json:"owner_type"`
	OwnerID   int32          `json:"owner_id"`
	StartTime time.Time      `json:"start_time"`
	EndTime   time.Time      `json:"end_time"`
}

func (q *Queries) CreateTimePreference(ctx context.Context, arg CreateTimePreferenceParams) (TimePreference, error) {
	row := q.db.QueryRowContext(ctx, createTimePreference,
		arg.OwnerType,
		arg.OwnerID,
		arg.StartTime,
		arg.EndTime,
	)
	var i TimePreference
	err := row.Scan(
		&i.ID,
		&i.OwnerType,
		&i.OwnerID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteTimePreferenceByID = `-- name: DeleteTimePreferenceByID :exec
DELETE FROM time_preferences
WHERE id = $1
`

func (q *Queries) DeleteTimePreferenceByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTimePreferenceByID, id)
	return err
}

const deleteTimePreferenceByUnique = `-- name: DeleteTimePreferenceByUnique :exec
DELETE FROM time_preferences
WHERE owner_type = $1 AND owner_id = $2 AND start_time = $3 AND end_time = $4
`

type DeleteTimePreferenceByUniqueParams struct {
	OwnerType sql.NullString `json:"owner_type"`
	OwnerID   int32          `json:"owner_id"`
	StartTime time.Time      `json:"start_time"`
	EndTime   time.Time      `json:"end_time"`
}

func (q *Queries) DeleteTimePreferenceByUnique(ctx context.Context, arg DeleteTimePreferenceByUniqueParams) error {
	_, err := q.db.ExecContext(ctx, deleteTimePreferenceByUnique,
		arg.OwnerType,
		arg.OwnerID,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const getTimePreferenceByID = `-- name: GetTimePreferenceByID :one
SELECT id, owner_type, owner_id, start_time, end_time
FROM time_preferences
WHERE id = $1
`

func (q *Queries) GetTimePreferenceByID(ctx context.Context, id int32) (TimePreference, error) {
	row := q.db.QueryRowContext(ctx, getTimePreferenceByID, id)
	var i TimePreference
	err := row.Scan(
		&i.ID,
		&i.OwnerType,
		&i.OwnerID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const getTimePreferencesByOwner = `-- name: GetTimePreferencesByOwner :many
SELECT id, owner_type, owner_id, start_time, end_time
FROM time_preferences
WHERE owner_type = $1 AND owner_id = $2
ORDER BY start_time
`

type GetTimePreferencesByOwnerParams struct {
	OwnerType sql.NullString `json:"owner_type"`
	OwnerID   int32          `json:"owner_id"`
}

func (q *Queries) GetTimePreferencesByOwner(ctx context.Context, arg GetTimePreferencesByOwnerParams) ([]TimePreference, error) {
	rows, err := q.db.QueryContext(ctx, getTimePreferencesByOwner, arg.OwnerType, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimePreference{}
	for rows.Next() {
		var i TimePreference
		if err := rows.Scan(
			&i.ID,
			&i.OwnerType,
			&i.OwnerID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimePreference = `-- name: UpdateTimePreference :exec
UPDATE time_preferences
SET start_time = $3, end_time = $4
WHERE owner_type = $1 AND owner_id = $2
`

type UpdateTimePreferenceParams struct {
	OwnerType sql.NullString `json:"owner_type"`
	OwnerID   int32          `json:"owner_id"`
	StartTime time.Time      `json:"start_time"`
	EndTime   time.Time      `json:"end_time"`
}

func (q *Queries) UpdateTimePreference(ctx context.Context, arg UpdateTimePreferenceParams) error {
	_, err := q.db.ExecContext(ctx, updateTimePreference,
		arg.OwnerType,
		arg.OwnerID,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}
