// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package db

import (
	"context"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (organizer_id, event_name, event_description, duration)
VALUES ($1, $2, $3, $4)
RETURNING event_id, organizer_id, event_name, event_description, duration, created_at, updated_at
`

type CreateEventParams struct {
	OrganizerID      int32  `json:"organizer_id"`
	EventName        string `json:"event_name"`
	EventDescription string `json:"event_description"`
	Duration         int32  `json:"duration"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.OrganizerID,
		arg.EventName,
		arg.EventDescription,
		arg.Duration,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.OrganizerID,
		&i.EventName,
		&i.EventDescription,
		&i.Duration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE event_id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, eventID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, eventID)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT event_id, organizer_id, event_name, event_description, duration, created_at, updated_at
FROM events
WHERE event_id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, eventID int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.OrganizerID,
		&i.EventName,
		&i.EventDescription,
		&i.Duration,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT event_id, organizer_id, event_name, event_description, duration, created_at, updated_at
FROM events
ORDER BY created_at DESC
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.OrganizerID,
			&i.EventName,
			&i.EventDescription,
			&i.Duration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEventsByOrganizer = `-- name: ListEventsByOrganizer :many
SELECT event_id, organizer_id, event_name, event_description, duration, created_at, updated_at
FROM events
WHERE organizer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEventsByOrganizer(ctx context.Context, organizerID int32) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEventsByOrganizer, organizerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.OrganizerID,
			&i.EventName,
			&i.EventDescription,
			&i.Duration,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET event_name = $2, event_description = $3, duration = $4, updated_at = $5
WHERE event_id = $1
`

type UpdateEventParams struct {
	EventID          int32     `json:"event_id"`
	EventName        string    `json:"event_name"`
	EventDescription string    `json:"event_description"`
	Duration         int32     `json:"duration"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.EventID,
		arg.EventName,
		arg.EventDescription,
		arg.Duration,
		arg.UpdatedAt,
	)
	return err
}
