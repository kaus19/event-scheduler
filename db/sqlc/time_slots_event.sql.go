// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_slots_event.sql

package db

import (
	"context"
	"time"
)

const createTimeSlotEvent = `-- name: CreateTimeSlotEvent :one
INSERT INTO time_slots_event (event_id, start_time, end_time)
VALUES ($1, $2, $3)
RETURNING id, event_id, start_time, end_time
`

type CreateTimeSlotEventParams struct {
	EventID   int32     `json:"event_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) CreateTimeSlotEvent(ctx context.Context, arg CreateTimeSlotEventParams) (TimeSlotsEvent, error) {
	row := q.db.QueryRowContext(ctx, createTimeSlotEvent, arg.EventID, arg.StartTime, arg.EndTime)
	var i TimeSlotsEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteTimeSlotEvent = `-- name: DeleteTimeSlotEvent :exec
DELETE FROM time_slots_event
WHERE id = $1 AND event_id = $2
`

type DeleteTimeSlotEventParams struct {
	ID      int32 `json:"id"`
	EventID int32 `json:"event_id"`
}

func (q *Queries) DeleteTimeSlotEvent(ctx context.Context, arg DeleteTimeSlotEventParams) error {
	_, err := q.db.ExecContext(ctx, deleteTimeSlotEvent, arg.ID, arg.EventID)
	return err
}

const getTimeSlotsByEvent = `-- name: GetTimeSlotsByEvent :many
SELECT id, event_id, start_time, end_time
FROM time_slots_event
WHERE event_id = $1
ORDER BY start_time
`

func (q *Queries) GetTimeSlotsByEvent(ctx context.Context, eventID int32) ([]TimeSlotsEvent, error) {
	rows, err := q.db.QueryContext(ctx, getTimeSlotsByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimeSlotsEvent{}
	for rows.Next() {
		var i TimeSlotsEvent
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimeSlotEvent = `-- name: UpdateTimeSlotEvent :exec
UPDATE time_slots_event
SET start_time = $3, end_time = $4
WHERE id = $1 AND event_id = $2
`

type UpdateTimeSlotEventParams struct {
	ID        int32     `json:"id"`
	EventID   int32     `json:"event_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) UpdateTimeSlotEvent(ctx context.Context, arg UpdateTimeSlotEventParams) error {
	_, err := q.db.ExecContext(ctx, updateTimeSlotEvent,
		arg.ID,
		arg.EventID,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}
