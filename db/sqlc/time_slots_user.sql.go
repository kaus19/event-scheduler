// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: time_slots_user.sql

package db

import (
	"context"
	"time"
)

const createTimeSlotUser = `-- name: CreateTimeSlotUser :one
INSERT INTO time_slots_user (user_id, start_time, end_time)
VALUES ($1, $2, $3)
RETURNING id, user_id, start_time, end_time
`

type CreateTimeSlotUserParams struct {
	UserID    int32     `json:"user_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) CreateTimeSlotUser(ctx context.Context, arg CreateTimeSlotUserParams) (TimeSlotsUser, error) {
	row := q.db.QueryRowContext(ctx, createTimeSlotUser, arg.UserID, arg.StartTime, arg.EndTime)
	var i TimeSlotsUser
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
	)
	return i, err
}

const deleteTimePreferenceUser = `-- name: DeleteTimePreferenceUser :exec
DELETE FROM time_slots_user
WHERE id = $1 AND user_id = $2
`

type DeleteTimePreferenceUserParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteTimePreferenceUser(ctx context.Context, arg DeleteTimePreferenceUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteTimePreferenceUser, arg.ID, arg.UserID)
	return err
}

const getTimePreferencesByUser = `-- name: GetTimePreferencesByUser :many
SELECT id, user_id, start_time, end_time
FROM time_slots_user
WHERE user_id = $1
ORDER BY start_time
`

func (q *Queries) GetTimePreferencesByUser(ctx context.Context, userID int32) ([]TimeSlotsUser, error) {
	rows, err := q.db.QueryContext(ctx, getTimePreferencesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TimeSlotsUser{}
	for rows.Next() {
		var i TimeSlotsUser
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimePreferencesForAllUsers = `-- name: GetTimePreferencesForAllUsers :many
SELECT user_id, start_time, end_time
FROM time_slots_user
`

type GetTimePreferencesForAllUsersRow struct {
	UserID    int32     `json:"user_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) GetTimePreferencesForAllUsers(ctx context.Context) ([]GetTimePreferencesForAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTimePreferencesForAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTimePreferencesForAllUsersRow{}
	for rows.Next() {
		var i GetTimePreferencesForAllUsersRow
		if err := rows.Scan(&i.UserID, &i.StartTime, &i.EndTime); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimePreferenceUser = `-- name: UpdateTimePreferenceUser :exec
UPDATE time_slots_user
SET start_time = $3, end_time = $4
WHERE id = $1 AND user_id = $2
`

type UpdateTimePreferenceUserParams struct {
	ID        int32     `json:"id"`
	UserID    int32     `json:"user_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) UpdateTimePreferenceUser(ctx context.Context, arg UpdateTimePreferenceUserParams) error {
	_, err := q.db.ExecContext(ctx, updateTimePreferenceUser,
		arg.ID,
		arg.UserID,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}
