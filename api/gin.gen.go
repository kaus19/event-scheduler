// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new event
	// (POST /events)
	CreateEvent(c *gin.Context)
	// List all events
	// (GET /events/list)
	ListEvents(c *gin.Context)
	// List events by organizer
	// (GET /events/organizer/{organizer_id})
	ListEventsByOrganizer(c *gin.Context, organizerId int)
	// Delete an event
	// (DELETE /events/{event_id})
	DeleteEvent(c *gin.Context, eventId int)
	// Get an event by ID
	// (GET /events/{event_id})
	GetEventByID(c *gin.Context, eventId int)
	// Update an event's description
	// (PUT /events/{event_id})
	UpdateEventDescription(c *gin.Context, eventId int)
	// List all users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Create a new user
	// (POST /users)
	PostUsers(c *gin.Context)
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateEvent operation middleware
func (siw *ServerInterfaceWrapper) CreateEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateEvent(c)
}

// ListEvents operation middleware
func (siw *ServerInterfaceWrapper) ListEvents(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEvents(c)
}

// ListEventsByOrganizer operation middleware
func (siw *ServerInterfaceWrapper) ListEventsByOrganizer(c *gin.Context) {

	var err error

	// ------------- Path parameter "organizer_id" -------------
	var organizerId int

	err = runtime.BindStyledParameterWithOptions("simple", "organizer_id", c.Param("organizer_id"), &organizerId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter organizer_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListEventsByOrganizer(c, organizerId)
}

// DeleteEvent operation middleware
func (siw *ServerInterfaceWrapper) DeleteEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId int

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteEvent(c, eventId)
}

// GetEventByID operation middleware
func (siw *ServerInterfaceWrapper) GetEventByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId int

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEventByID(c, eventId)
}

// UpdateEventDescription operation middleware
func (siw *ServerInterfaceWrapper) UpdateEventDescription(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventId int

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateEventDescription(c, eventId)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/events", wrapper.CreateEvent)
	router.GET(options.BaseURL+"/events/list", wrapper.ListEvents)
	router.GET(options.BaseURL+"/events/organizer/:organizer_id", wrapper.ListEventsByOrganizer)
	router.DELETE(options.BaseURL+"/events/:event_id", wrapper.DeleteEvent)
	router.GET(options.BaseURL+"/events/:event_id", wrapper.GetEventByID)
	router.PUT(options.BaseURL+"/events/:event_id", wrapper.UpdateEventDescription)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
}
